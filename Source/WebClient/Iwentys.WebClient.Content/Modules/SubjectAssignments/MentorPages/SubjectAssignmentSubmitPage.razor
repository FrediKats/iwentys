@page "/subject/{SubjectId:int}/management/assignments/submits/{SubmitId:int}"

@namespace Iwentys.WebClient.Content
@attribute [Authorize]

@if (_hasReview)
{
    <Iwentys.WebClient.Content.Modules.SubjectAssignments.MentorPages.Components.ConfirmationModal Title="Are you sure?" @ref="_confirmationModal" OnConfirm="@(async()=> await Confirm())" OnCancel="@(()=>_confirmationModal.Hide())">
        <ChildContent>
            <MudText Typo="Typo.body1">You are going to rewrite @_reviewer.FirstName @_reviewer.SecondName review, are you sure?</MudText>
        </ChildContent>
    </Iwentys.WebClient.Content.Modules.SubjectAssignments.MentorPages.Components.ConfirmationModal>
}
<MudContainer>
    <MudGrid>
        <MudItem xs="12" sm="12" md="12">
            <MudText Align="Align.Center" Typo="Typo.h4">Assignment submits</MudText>
            @if (_submit is not null)
            {
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Assignment: @_submit.SubjectAssignmentTitle</MudText>
                        <MudText Typo="Typo.body2">Author: @_submit.Student.GetFullName()</MudText>
                        <MudText Typo="Typo.body2">Description: @_submit.StudentDescription</MudText>
                        <MudText Typo="Typo.body2">Submit time: @_submit.SubmitTimeUtc</MudText>

                        @switch (_submit.State)
                        {
                            case SubmitState.Created:
                                break;

                            case SubmitState.Approved:
                                <MudText Typo="Typo.body2">
                                    Approved (@_submit.ApproveTimeUtc)
                                </MudText>
                                break;

                            case SubmitState.Rejected:
                                <MudText Typo="Typo.body2">
                                    Rejected (@_submit.RejectTimeUtc)
                                </MudText>
                                break;

                            default:
                                throw new ArgumentOutOfRangeException(nameof(SubmitState), "Unsupported assignment state");
                        }
                    </MudCardContent>
                </MudCard>
            }

        </MudItem>
        @if (_hasReview)
        {
            <MudItem xs="12" sm="12" md="12">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">Previous reviewer: @_reviewer.FirstName @_reviewer.SecondName</MudText>
                        <MudText Typo="Typo.body2">Review time: @(_submit.RejectTimeUtc ?? _submit.ApproveTimeUtc)</MudText>
                        <MudText Typo="Typo.body2">Review verdict: @_submit.State</MudText>
                        <MudText Typo="Typo.body2">Comment: @_submit.Comment</MudText>
                        @if (_submit.State is SubmitState.Approved)
                        {
                            <MudText Typo="Typo.body2">Points: @_submit.Points</MudText>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="12" sm="12" md="12">
            <MudCard>
                <EditForm Model="_arguments" OnValidSubmit="@(async () => await CheckBeforeCreate())">
                    <MudCardContent>
                        <MudText Align="Align.Left" Typo="Typo.h4">Add feedback</MudText>
                        <DataAnnotationsValidator/>
                        
                        <MudTextField InputType="InputType.Text" @bind-Value="@_arguments.Comment"
                                      For="(()=>_arguments.Comment)" Label="Comment"/>
                        <MudSelect T="FeedbackType" For="(() => _arguments.FeedbackType)"
                                   @bind-Value="@_arguments.FeedbackType" Label="Feedback Type" Class="mt-4">
                            <MudSelectItem Value="@(FeedbackType.Approve)"></MudSelectItem>
                            <MudSelectItem Value="@(FeedbackType.Reject)"></MudSelectItem>
                        </MudSelect>
                        
                        <MudNumericField For="(()=>_arguments.Points)" Class="mt-4"
                                      @bind-Value="@_arguments.Points" Label="Points"/>
                        <ValidationMessage For="() => _arguments.Comment"/>
                    </MudCardContent>

                    <MudCardActions>
                        <MudButton class="dark-elevation-04" ButtonType="ButtonType.Submit">Send feedback</MudButton>
                    </MudCardActions>
                </EditForm>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter]
    public int SubjectId { get; set; }
    [Parameter]
    public int SubmitId { get; set; }
}