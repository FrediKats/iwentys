<div class="card-list-element">
    <div class="card-list-element-content" style="padding: 0px;">
        <div class="alert @GetAlertStyle(Submit.State) my-0" role="alert">
        <h4 class="alert-heading">Submit for @Submit.SubjectAssignmentTitle</h4>
        <p class="mb-0"><b>Description:</b> @Submit.StudentDescription</p>
        <p><b>Submitted:</b> @Submit.SubmitTimeUtc</p>
        <hr>
        @switch (Submit.State)
        {
            case SubmitState.Created:
                <div class="alert alert-warning my-0" role="alert">
                    <h4 class="alert-heading">Submit for @Submit.SubjectAssignmentTitle</h4>
                    <b>Submitted:</b> @Submit.SubmitTimeUtc
                    <a>@Submit.StudentPRLink</a>
                    <hr>
                    <p class="mb-0">
                        <b>Not checked</b>
                    </p>
                </div>
                break;
            case SubmitState.Approved:
                <div class="alert alert-success my-0" role="alert">
                    <h4 class="alert-heading">Submit for @Submit.SubjectAssignmentTitle</h4>
                    <b>Submitted:</b> @Submit.SubmitTimeUtc
                    <a>@Submit.StudentPRLink</a>
                    <hr>
                    <p class="mb-0">
                        <b>Approved!!! Points: @Submit.Points</b>
                    </p>
                <p class="mb-0">
                    <b>Mentor comment:</b> @Submit.Comment
                </p>
                </div>
                break;
            case SubmitState.Rejected:
                <div class="alert alert-danger my-0" role="alert">
                    <h4 class="alert-heading">Submit for @Submit.SubjectAssignmentTitle</h4>
                    <b>Rejected =( Submitted:</b> @Submit.SubmitTimeUtc
                    <a>@Submit.StudentPRLink</a>
                    <hr>
                    <p class="mb-0">
                        <b>Points: @Submit.Points</b>
                    </p>
                 <p class="mb-0">
                    <b>Mentor comment:</b> @Submit.Comment
                 </p>
                </div>
                break;
            case SubmitState.Closed:
                <p class="mb-0">
                    <b>Closed</b>
                </p>
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(SubmitState), "Unsupported assignment state");
        }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public SubjectAssignmentSubmitDto Submit { get; set; }

    public string GetAlertStyle(SubmitState state)
    {
        return state switch {
            SubmitState.Approved => "alert-success",
            SubmitState.Created => "alert-warning",
            SubmitState.Rejected => "alert-danger",
            SubmitState.Closed => "alert-secondary",
            _ => throw new ArgumentOutOfRangeException(nameof(state), state, "Unsupported assignment state")};
    }
}